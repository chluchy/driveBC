}
map <- driveBC_map_major(1,1)
icon.fa <- leaflet::makeAwesomeIcon(icon = 'flag', markerColor = 'red', library='fa', iconColor = 'black')
driveBC_map_major <- function(days,region=NA){
start <- Sys.Date()-days
start_date <- paste('>',start,sep="")
url <- httr::modify_url('https://api.open511.gov.bc.ca/events')
if (is.na(region)==F){
area <- paste('drivebc.ca/',region,sep="")
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000,area_id=area))
} else {
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000))
}
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
if (httr::http_error(resp)){
stop(paste("Invalid url, please revisit parameters \n",resp$url), call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text",encoding = 'UTF-8'))
df <- data.frame(parsed$events)
df$areas <- as.character(lapply(df$areas,'[[',2))
df$day <- as.Date(strftime(df$created,format='%F'))
icon.fa <- leaflet::makeAwesomeIcon(icon = 'flag', markerColor = 'red', library='fa', iconColor = 'black')
mp <- leaflet()
mp <- addTiles(mp)
for (i in seq(1,length(df$geography$coordinates))){
if(df$geography$type[i]=='LineString'&df$status[i]=='ACTIVE'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],df$geography$coordinates[i][[1]][,2],popup = df$description[i],color = 'red' )
}
if (df$geography$type[i]=='LineString'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],df$geography$coordinates[i][[1]][,2],popup = df$description[i],color = 'blue' )
}
if(df$geography$type[i]=='Point'&df$status[i]=='ACTIVE'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],df$geography$coordinates[i][[1]][2],popup = df$description[i],icon=icon.fa)
}
if(df$geography$type[i]=='Point'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],df$geography$coordinates[i][[1]][2],popup = df$description[i])
}
}
mp
}
map <- driveBC_map_major(1,1)
library(leaflet)
driveBC_map_major <- function(days,region=NA){
start <- Sys.Date()-days
start_date <- paste('>',start,sep="")
url <- httr::modify_url('https://api.open511.gov.bc.ca/events')
if (is.na(region)==F){
area <- paste('drivebc.ca/',region,sep="")
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000,area_id=area))
} else {
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000))
}
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
if (httr::http_error(resp)){
stop(paste("Invalid url, please revisit parameters \n",resp$url), call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text",encoding = 'UTF-8'))
df <- data.frame(parsed$events)
df$areas <- as.character(lapply(df$areas,'[[',2))
df$day <- as.Date(strftime(df$created,format='%F'))
icon.fa <- leaflet::makeAwesomeIcon(icon = 'flag', markerColor = 'red', library='fa', iconColor = 'black')
mp <- leaflet::leaflet()
mp <- leaflet::addTiles(mp)
for (i in seq(1,length(df$geography$coordinates))){
if(df$geography$type[i]=='LineString'&df$status[i]=='ACTIVE'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],df$geography$coordinates[i][[1]][,2],popup = df$description[i],color = 'red' )
}
if (df$geography$type[i]=='LineString'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],df$geography$coordinates[i][[1]][,2],popup = df$description[i],color = 'blue' )
}
if(df$geography$type[i]=='Point'&df$status[i]=='ACTIVE'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],df$geography$coordinates[i][[1]][2],popup = df$description[i],icon=icon.fa)
}
if(df$geography$type[i]=='Point'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],df$geography$coordinates[i][[1]][2],popup = df$description[i])
}
}
mp
}
map <- driveBC_map_major(1,1)
map
driveBC_map_major <- function(days,region=NA){
start <- Sys.Date()-days
start_date <- paste('>',start,sep="")
url <- httr::modify_url('https://api.open511.gov.bc.ca/events')
if (is.na(region)==F){
area <- paste('drivebc.ca/',region,sep="")
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000,area_id=area))
} else {
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000))
}
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
if (httr::http_error(resp)){
stop(paste("Invalid url, please revisit parameters \n",resp$url), call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text",encoding = 'UTF-8'))
df <- data.frame(parsed$events)
df$areas <- as.character(lapply(df$areas,'[[',2))
df$day <- as.Date(strftime(df$created,format='%F'))
icon.fa <- leaflet::makeAwesomeIcon(icon = 'flag', markerColor = 'red', library='fa', iconColor = 'black')
mp <- leaflet::leaflet()
mp <- leaflet::addTiles(mp)
for (i in seq(1,length(df$geography$coordinates))){
if(df$geography$type[i]=='LineString'&df$status[i]=='ACTIVE'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],df$geography$coordinates[i][[1]][,2],popup = df$description[i],color = 'red' )
}
if (df$geography$type[i]=='LineString'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],df$geography$coordinates[i][[1]][,2],popup = df$description[i],color = 'blue' )
}
if(df$geography$type[i]=='Point'&df$status[i]=='ACTIVE'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],df$geography$coordinates[i][[1]][2],popup = df$description[i],icon=icon.fa)
}
if(df$geography$type[i]=='Point'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],df$geography$coordinates[i][[1]][2],popup = df$description[i])
}
}
mp
}
map <- driveBC_map_major(1,1)
map
map <- driveBC_map_major(1)
map
devtool::document()
devtools::document()
devtools::document()
devtools::load_all(".")
?driveBC_map_major
library(AntWeb)
?aw_map
?driveBC_map_major
?aw_map
?driveBC_map_major
?driveBC_map_major
devtools::document()
?driveBC_map_major
devtools::document()
?driveBC_map_major
devtools::document()
?driveBC_map_major
map <- driveBC_map_major(1)
map
driveBC_map_major <- function(days,region=NA){
start <- Sys.Date()-days
start_date <- paste('>',start,sep="")
url <- httr::modify_url('https://api.open511.gov.bc.ca/events')
if (is.na(region)==F){
area <- paste('drivebc.ca/',region,sep="")
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000,area_id=area))
} else {
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000))
}
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
if (httr::http_error(resp)){
stop(paste("Invalid url, please revisit parameters \n",resp$url), call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text",encoding = 'UTF-8'))
df <- data.frame(parsed$events)
df$areas <- as.character(lapply(df$areas,'[[',2))
df$day <- as.Date(strftime(df$created,format='%F'))
icon.fa <- leaflet::makeAwesomeIcon(icon = 'flag', markerColor = 'red', library='fa', iconColor = 'black')
mp <- leaflet::leaflet()
mp <- leaflet::addTiles(mp)
for (i in seq(1,length(df$geography$coordinates))){
if(df$geography$type[i]=='LineString'&df$status[i]=='ACTIVE'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],
df$geography$coordinates[i][[1]][,2],
popup = df$description[i],color = 'red' )
}
if (df$geography$type[i]=='LineString'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],
df$geography$coordinates[i][[1]][,2],
popup = df$description[i],color = 'blue' )
}
if(df$geography$type[i]=='Point'&df$status[i]=='ACTIVE'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],
df$geography$coordinates[i][[1]][2],
popup = df$description[i],icon=icon.fa)
}
if(df$geography$type[i]=='Point'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],
df$geography$coordinates[i][[1]][2],
popup = df$description[i])
}
}
mp
}
map <- driveBC_map_major(1)
map
driveBC_map_major <- function(days,region=NA){
start <- Sys.Date()-days
start_date <- paste('>',start,sep="")
url <- httr::modify_url('https://api.open511.gov.bc.ca/events')
if (is.na(region)==F){
area <- paste('drivebc.ca/',region,sep="")
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000,area_id=area))
} else {
resp <- httr::GET(url,query=list(severity='MAJOR',status='ALL',created=start_date,limit=10000))
}
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
if (httr::http_error(resp)){
stop(paste("Invalid url, please revisit parameters \n",resp$url), call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text",encoding = 'UTF-8'))
df <- data.frame(parsed$events)
df$areas <- as.character(lapply(df$areas,'[[',2))
df$day <- as.Date(strftime(df$created,format='%F'))
icon.fa <- leaflet::makeAwesomeIcon(icon = 'flag', markerColor = 'red', library='fa', iconColor = 'black')
mp <- leaflet::leaflet()
mp <- leaflet::addTiles(mp)
for (i in seq(1,length(df$geography$coordinates))){
if(df$geography$type[i]=='LineString'&df$status[i]=='ACTIVE'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],
df$geography$coordinates[i][[1]][,2],
popup = df$description[i],color = 'red' )
}
if (df$geography$type[i]=='LineString'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addPolylines(mp,df$geography$coordinates[i][[1]][,1],
df$geography$coordinates[i][[1]][,2],
popup = df$description[i],color = 'blue' )
}
if(df$geography$type[i]=='Point'&df$status[i]=='ACTIVE'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],
df$geography$coordinates[i][[1]][2],
popup = df$description[i],icon=icon.fa)
}
if(df$geography$type[i]=='Point'&df$status[i]=='ARCHIVED'){
mp <- leaflet::addAwesomeMarkers(mp,df$geography$coordinates[i][[1]][1],
df$geography$coordinates[i][[1]][2],
popup = df$description[i])
}
}
mp
}
map <- driveBC_map_major(1)
map
?driveBC_map_major
devtools::load_all(".")
?driveBC_map_major
devtools::document()
?driveBC_map_major
map <- driveBC_map_major(1)
map
devtools::load_all(".")
map <- driveBC_map_major(1,1)
View(map)
map
map <- driveBC_map_major(1)
map
devtools::load_all(".")
devtools::build()
devtools::document()
?driveBC_map_major
devtools::document()
?driveBC_map_major
devtools::load_all(".")
map<-driveBC_map_major(40,3)
map
map<-driveBC_map_major(4,3)
map
map<-driveBC_map_major(1,3)
map
library(AntWeb)
?aw_map
devtools::document()
?driveBC_map_major
?devtools
?UseMethod
?driveBC_map_major
map <- driveBC_map_major(2)
map
plot.new()
map <- driveBC_map_major(2)
map
devtools::load_all(".")
map <- driveBC_map_major(2)
map
map <- driveBC_map_major(2)
devtools::load_all(".")
map <- driveBC_map_major(2)
map
map
map <- driveBC_map_major(2)
map
devtools::uses_testthat()
devtools::use_testthat()
install.packages('testthat')
library(testthat)
devtools::use_testthat()
devtools::uses_testthat()
library(usethis)
use_testthat()
use_test()
devtools::test()
devtools::test_coverage()
map
typeof(map)
View(map)
devtools::test()
devtools::test()
typeof(driveBC_map_major(1))
expect_type
?expect_type
expect_type(driveBC_map_major(1),list)
expect_type(driveBC_map_major(1),list)
devtools::test()
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::test()
map <- driveBC_map_major(1,2,"MINOR")
devtools::test()
devtools::test()
devtools::test_coverage()
devtools::load_all(".")
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::test()
devtools::test()
typeof(driveBC_map_major(1,1,'MINOR'))
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
devtools::load_all(".")
devtools::load_all(".")
?driveBC_map_major
driveBC_map_major(4)
unlink('C:/Users/chris/MDS/labs/block4/data_534/project/drivebc_journal_cache', recursive = TRUE)
c(1,1)*c(2,2)
?driveBC_map_major
devtools::load_all(".")
?driveBC_map_major
map <- driveBC_map_major(2,status='ACTIVE')
map
map <- driveBC_map_major(2)
map
map <- driveBC_map_major(6)
map
devtools::load_all(".")
?driveBC_map_major
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
install.packages("neuralnet")
#install.packages("neuralnet")
library(neuralnet)
?"neuralnet"
data(cars)
plot(cars)
attach(cars)
carlm <- lm(dist~speed, data=cars)
summary(carlm)
sum(carlm$residuals^2)
nn <- neuralnet(dist~speed, data=cars, hidden=0)
plot(nn)
sum((compute(nn, nn$data)$net.result-dist)^2)
sum(carlm$residuals^2)
library(gclus)
data(body)
sbod <- cbind(scale(body[,1:24]), factor(body[,25]))
colnames(sbod)[25] <- "Gender"
library(nnet)
nnbod2 <- nnet(factor(Gender)~., data=sbod, size=4) # here size is number of hidden
table(body[,25], predict(nnbod2, type="class"))
library(NeuralNetTools)
install.packages('NeuralNetTools')
install.packages(c("neuralnet", "NeuralNetTools"))
install.packages(c("neuralnet", "NeuralNetTools"))
install.packages(c("neuralnet", "NeuralNetTools"))
install.packages(c("neuralnet", "NeuralNetTools"))
knitr::opts_chunk$set(echo = TRUE)
library(gclus)
data(body)
sbod <- cbind(scale(body[,1:24]), factor(body[,25])) # this is the standardizing
colnames(sbod)[25] <- "Gender" # this is deleted and thus needs to be added in
library(nnet)
nnbod2 <- nnet(factor(Gender)~., data=sbod, size=4) # here size is number of hidden
table(body[,25], predict(nnbod2, type="class"))
library(NeuralNetTools)
plotnet(nnbod2)
set.seed(53747958)
bindex <- sample(1:nrow(sbod), 250)
btrain <- sbod[bindex,]
btest <- sbod[-bindex,]
nnbodtr <- nnet(factor(Gender)~., data=btrain, size=4)
table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class"))
for(i in 1:10){
nnbodtr <- nnet(factor(Gender)~., data=btrain, size=i, trace=FALSE)
print(paste("Number of hidden layer variables:", i))
print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
library(MASS)
blda <- lda(factor(Gender)~., data=data.frame(btrain))
table(btest[,25], predict(blda, newdata=data.frame(btest[,-25]))$class)
library(randomForest)
rfbod <- randomForest(factor(Gender)~., data=data.frame(btrain))
rfbod
table(btest[,25], predict(rfbod, newdata=data.frame(btest[,-25])))
logbod <- glm(factor(Gender) ~ . , data=data.frame(btrain), family="binomial")
table(btest[,25], predict(logbod, newdata=data.frame(btest[,-25]), type="response") > .5)
load("~/Downloads/nutrition.rdata")
load("~/Downloads/nutrition.rdata")
dim(na.omit(nutrition))
setwd("C:/Users/chris/MDS/block4/data_572/labs")
load("~/Downloads/nutrition.rdata")
load("~/Downloads/nutrition.rdata")
load("nutrition.rdata")
dim(nutrition)
dim(na.omit(nutrition))
colSums(is.na(nutrition))
nutrition <- na.omit(nutrition)
summary(nutrition)
nupca <- prcomp(nutrition[,-c(1,28)], scale.=TRUE)
summary(nupca)
plot(nupca, type="lines")
devtools::load_all("C:/Users/chris/MDS/labs/block4/data_534/project/driveBC")
map <- driveBC_map_major(1)
map
?driveBC_map_major
devtools::document()
devtools::load_all("C:/Users/chris/MDS/labs/block4/data_534/project/driveBC")
devtools::document()
devtools::load_all(".")
devtools::document()
?driveBC_map_major
devtools::document()
?driveBC_map_major
devtools::document()
?driveBC_map_major
devtools::document()
?driveBC_map_major
browseVignettes()
devtools::load_all(".")
browseVignettes()
devtools::use_vignette("christian-vignette")
devtools::vignettes
library(devtools)
install.packages('devtools')
install.packages("devtools")
devtools::build_vignettes()
devtools::build_vignettes(pkg = 'driveBC')
devtools::load_all(".")
devtools::load_all(".")
devtools::build_vignettes(pkg = '.')
devtools::build_vignettes()
devtools::use_vignettes()
usethis::use_vignette('christian-vignette')
usethis::use_readme_md()
proj_activate()
usethis::proj_activate()
devtools::build()
install()
devtools::install()
library(driveBC)
map <- driveBC_map_major(days=10)
map <- driveBC::driveBC_map_major(days=10)
devtools::load_all(".")
driveBC_map_major(1)
map <- driveBC::driveBC_map_major(days=10)
map <- driveBC_map_major(days=10)
library(driveBC)
map <- driveBC_map_major(days=10)
library(driveBC)
map <- driveBC_map_major(10)
library(driveBC)
map <- driveBC_map_major(10)
map
library(driveBC)
map <- driveBC_map_major(10)
map
devtools::load_all(".")
driveBC_map_major(12)
devtools::install()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
install.packages('qpdf')
devtools::check()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
?driveBC_map_major
devtools::document()
?driveBC_map_major
devtools::check()
devtools::document()
devtools::check()
driveBC::driveBC_map_major()
driveBC::driveBC_map_major(1)
devtools::check()
devtools::document()
?driveBC_map_major
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()

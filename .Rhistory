library(MLmetrics)
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
car_data <- read.csv("car93.csv")
head(car_data)
car_pca <- prcomp(car_data[,-c(1,2,3)], scale.=TRUE)
summary(car_pca)
biplot(car_pca)
plot(car_pca, type="lines")
car_pca$rotation[,1:2]
car_data$response <- ifelse(car_data$Type == 'Small', 1, 0)
as.factor(car_data$response)
log_reg_data <- data.frame(car_pca$x[,1:2])
log_reg_data$response <- as.factor(car_data$response)
head(log_reg_data)
library(MLmetrics)
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
log_loss[i] <- LogLoss(logistic_reg$fitted.values,as.numeric(train$response)-1)
mean(log_loss)
results_prob
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
#log_loss[i] <- LogLoss(logistic_reg$fitted.values,as.numeric(train$response)-1)
#mean(log_loss)
(sum(-log(results_prob[log_reg_data$response==results_binary])) + sum(-log(1-results_prob[log_reg_data$response!=results_binary])))/82
library(MLmetrics)
results_prob <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
}
#CV LogLoss
log_loss[i] <- LogLoss(logistic_reg$fitted.values,as.numeric(train$response)-1)
mean(log_loss)
library(MLmetrics)
results_prob <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
}
#CV LogLoss
log_loss[i] <- LogLoss(logistic_reg$fitted.values,as.numeric(train$response)-1)
mean(log_loss)
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
#log_loss[i] <- LogLoss(logistic_reg$fitted.values,as.numeric(train$response)-1)
#mean(log_loss)
(sum(-log(results_prob[log_reg_data$response==results_binary])) + sum(-log(1-results_prob[log_reg_data$response!=results_binary])))/82
results_prob
results_binary
results_prob[log_reg_data$response==results_binary]
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
#log_loss[i] <- LogLoss(logistic_reg$fitted.values,as.numeric(train$response)-1)
#mean(log_loss)
(sum(-log(results_prob[log_reg_data$response==1)) + sum(-log(1-results_prob[log_reg_data$response!=1])))/82
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
#log_loss[i] <- LogLoss(logistic_reg$fitted.values,as.numeric(train$response)-1)
#mean(log_loss)
(sum(-log(results_prob[log_reg_data$response==1])) + sum(-log(1-results_prob[log_reg_data$response!=1])))/82
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
#(sum(-log(results_prob[log_reg_data$response==1])) + #sum(-log(1-results_prob[log_reg_data$response!=1])))/82
LogLoss(results_binary, as.numeric(log_reg_data$response)-1)
?LogLoss
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
#(sum(-log(results_prob[log_reg_data$response==1])) + #sum(-log(1-results_prob[log_reg_data$response!=1])))/82
LogLoss(results_prob, as.numeric(log_reg_data$response)-1)
library(MLmetrics)
results_prob <- NULL
results_binary <- NULL
log_loss <- NULL
for (i in seq(length(car_data$response))){
train <- log_reg_data[-i,]
test <- log_reg_data[i,]
logistic_reg <- glm(response ~., data = train, family = binomial)
results_prob[i] <- predict(logistic_reg,subset(test,select=c(1,2)),type='response')
results_binary[i] <- ifelse(results_prob[i] > 0.5, 1, 0)
}
#CV LogLoss
#(sum(-log(results_prob[log_reg_data$response==1])) + #sum(-log(1-results_prob[log_reg_data$response!=1])))/82
LogLoss(results_prob, as.numeric(log_reg_data$response)-1)
?MultiLogLoss
lin_da$posterior[,2]
library(dplyr)
log_reg_data$response <- car_data$Type
log_reg_data <- log_reg_data %>% mutate(response=ifelse(response=="Small",1,ifelse(response=="Compact",2,ifelse(response=="Large",3,ifelse(response=="Midsize",4,ifelse(response=='Sporty',5,NA))))))
log_reg_data$response <- as.factor(log_reg_data$response)
lin_da <- lda(log_reg_data$response~., data=log_reg_data, CV=T)
table(log_reg_data$response, lin_da$class)
lin_da$posterior[,2]
#LOOCV LDA Log Loss on 5 car types:
#Multiclass
MultiLogLoss(lin_da$posterior[,2], as.numeric(log_reg_data$response)-1)
log_reg_data$response
data(iris)
svm.model <- e1071::svm(Species~., data = iris, probability = TRUE)
pred <- predict(svm.model, iris, probability = TRUE)
library(datasets)
#LOOCV LDA Log Loss on 5 car types:
#Multiclass
MultiLogLoss(lin_da$posterior[,2], as.numeric(log_reg_data$response))
library(dplyr)
log_reg_data$response <- car_data$Type
log_reg_data <- log_reg_data %>% mutate(response=ifelse(response=="Small",1,ifelse(response=="Compact",2,ifelse(response=="Large",3,ifelse(response=="Midsize",4,ifelse(response=='Sporty',5,NA))))))
log_reg_data$response <- as.factor(log_reg_data$response)
lin_da <- lda(log_reg_data$response~., data=log_reg_data, CV=T)
table(log_reg_data$response, lin_da$class)
lin_da
#LOOCV LDA Log Loss on 5 car types:
#Multiclass
MultiLogLoss(lin_da$posterior, as.numeric(log_reg_data$response)-1)
library(nnet)
set.seed(4521, sample.kind = "Rounding")
fish_data <- read.csv('fish_toxicity.csv', sep = ';')
sfish <- apply(fish_data, 2, function(v) (v-min(v))/(max(v)-min(v)))
nnfish <- nnet(factor(sfish[,7])~., data=sfish, size=5)
sfish
library(nnet)
set.seed(4521, sample.kind = "Rounding")
fish_data <- read.csv('fish_toxicity.csv', sep = ';')
sfish <- apply(fish_data, 2, function(v) (v-min(v))/(max(v)-min(v)))
nnfish <- nnet(sfish[,7]~., data=sfish, size=5)
library(nnet)
set.seed(4521, sample.kind = "Rounding")
fish_data <- read.csv('fish_toxicity.csv', sep = ';', header = FALSE)
sfish <- apply(fish_data, 2, function(v) (v-min(v))/(max(v)-min(v)))
nnfish <- nnet(sfish[,7]~., data=sfish, size=5)
library(nnet)
set.seed(4521, sample.kind = "Rounding")
fish_data <- read.csv('fish_toxicity.csv', sep = ';', header = FALSE)
sfish <- apply(fish_data, 2, function(v) (v-min(v))/(max(v)-min(v)))
sfish <- as.data.frame(sfish)
nnfish <- nnet(sfish[,7]~., data=sfish, size=5)
library(nnet)
set.seed(4521, sample.kind = "Rounding")
fish_data <- read.csv('fish_toxicity.csv', sep = ';', header = FALSE)
sfish <- apply(fish_data, 2, function(v) (v-min(v))/(max(v)-min(v)))
sfish <- as.data.frame(sfish)
nnfish <- nnet(V7~., data=sfish, size=5)
sum(v7-predict(nnfish,data = sfish))/length((sfish$V7))
sum(V7-predict(nnfish,data = sfish))/length((sfish$V7))
sum(sfish$V7-predict(nnfish,data = sfish))/length((sfish$V7))
sum((sfish$V7-predict(nnfish,data = sfish))^2)/length((sfish$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
sum((sfish$V7-predict(nnfish_tr,data = test))^2)/length((sfish$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
sum((sfish$V7-predict(nnfish_tr,data = test))^2)/length((sfish_tr$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
sum((sfish$V7-predict(nnfish_tr,data = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
sum((train$V7-predict(nnfish_tr,data = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
sum((test$V7-predict(nnfish_tr,data = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
sum((test$V7-predict(nnfish_tr,newdata = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
sum((test$V7-predict(nnfish_tr, newdata = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
nnfish_tr <- nnet(V7~., data=train, size=5)
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
nnfish_tr_orig <- nnet(V7~., data=train, size=5)
sum((test$V7-predict(nnfish_tr_orig, newdata = test))^2)/length((train$V7))
fish_lm <- lm(V7 ~., data = train)
sum((test$V7-predict(fish_lm, newdata = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
fish_lm <- lm(V7 ~., data = train)
sum((test$V7-predict(fish_lm, newdata = test))^2)/length((train$V7))
fish_lm <- lm(V7 ~., data = train)
sum((test$V7-predict(fish_lm, newdata = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
nnfish_tr_orig <- nnet(V7~., data=train, size=5)
fish_lm <- lm(V7 ~., data = train)
sum((test$V7-predict(fish_lm, newdata = test))^2)/length((train$V7))
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
train <- sfish[ind,]
test <- sfish[-ind,]
fish_lm <- lm(V7 ~., data = train)
sum((test$V7-predict(fish_lm, newdata = test))^2)/length((train$V7))
#for non-normalized
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7))
}
#switching to linear activation function
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7))
}
#for non-normalized
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, trace = FALSE)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7))
}
#switching to linear activation function
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE, trace = FALSE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7))
}
#for non-normalized
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, trace = FALSE)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#switching to linear activation function
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE, trace = FALSE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#for non-normalized
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, trace = FALSE)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#switching to linear activation function
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE, trace = FALSE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#for non-normalized
set.seed(217)
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, trace = FALSE)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
set.seed(217)
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#switching to linear activation function
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE, trace = FALSE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#for non-normalized
set.seed(217)
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, trace = FALSE)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#switching to linear activation function
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE, trace = FALSE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#for non-normalized
set.seed(217)
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
set.seed(217)
nnfishtr <- nnet(V7~., data=train, size=i, trace = FALSE)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#switching to linear activation function
for(i in 1:10){
set.seed(217)
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE, trace = FALSE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#for non-normalized
set.seed(217)
ind <- sample(1:nrow(fish_data), 454)
train <- fish_data[ind,]
test <- fish_data[-ind,]
#trying different number of hidden layer variables for logistic activation fxn
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, trace = FALSE)
print(paste("Number of hidden layer variables using logistic activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
#switching to linear activation function
for(i in 1:10){
nnfishtr <- nnet(V7~., data=train, size=i, linout = TRUE, trace = FALSE)
print(paste("Number of hidden layer variables using linear activ. fxn:", i))
print(sum((test$V7-predict(nnfishtr, newdata = test))^2)/length((train$V7)))
}
setwd("~/Desktop/DataSci/data_534")
setwd("~/Desktop/DataSci/data_534")
setwd("~/Desktop/DataSci/data_534/driveBC")
devtools::load_all(".")
devtools::document()
devtools::install()
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::install()
install.packages('maps')
install.packages("maps")
driveBC
driveBC_map_route()
library(maps)
driveBC_map_route()
install.packages('stringr')
install.packages("stringr")
driveBC_map_route()
library(stringr)
driveBC_map_route()
devtools::load_all(".")
driveBC_map_route()
library(maps)
library(stringr)
driveBC_map_route()
driveBC_map_major()
driveBC_map_major(1)
driveBC_map_route()
devtools::load_all(".")
driveBC_map_route()
devtools::document()
devtools::install()
devtools::load_all(".")
length(driveBC_map_route("New York"))
length(driveBC_map_route("Vancouver"))
temp <- driveBC_map_route("New York")
temp[1]
temp[2]
british_columbia$city
library(maps)
can_cities <- maps::canada.cities
cities <- stringr::str_sub(can_cities$name, end = -4)
can_cities$city <- cities
british_columbia <- subset(can_cities, can_cities$country.etc == 'BC')
british_columbia$city
ifelse(british_columbia$city='Sooke',1,0)
ifelse(british_columbia$city=='Sooke',1,0)
match('Osoyoos',british_columbia$city)
match('New York',british_columbia$city)
driveBC_map_route("New York")
driveBC_map_route("New York")
driveBC_map_route("New York")
